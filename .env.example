# ============================================================================
# BALTIMORE TRANSIT SYSTEM CONFIGURATION (EXAMPLE)
# ============================================================================
# Copy this file to .env and customize with your actual values.
# This example shows all available configuration options with descriptions.

# ============================================================================
# CORE API & DATABASE CONFIGURATION
# ============================================================================

# API server port (default: 8080)
API_PORT=8080

# PostgreSQL database connection string
# Format: postgresql+psycopg2://user:password@host:port/database
DATABASE_URL=postgresql+psycopg2://postgres:postgres@db:5432/transit

# Redis connection string for caching realtime data
REDIS_URL=redis://redis:6379/0

# System timezone (affects timestamps and scheduling)
TZ=America/New_York

# ============================================================================
# FRONTEND & CORS CONFIGURATION
# ============================================================================

# CORS origins - comma-separated list of allowed frontend URLs
CORS_ORIGINS=http://localhost:4200

# API base URL for frontend communication (injected into Angular app)
API_BASE=http://localhost:8080

# ============================================================================
# STATIC GTFS DATA CONFIGURATION
# ============================================================================

# OPTION A: Multi-source GTFS feeds (RECOMMENDED)
# Comma-separated key=url pairs. IDs are prefixed with "key:" during seeding
# Example for Maryland MTA (all transit modes):
# GTFS_STATIC_SOURCES=localbus=https://feeds.mta.maryland.gov/gtfs/local-bus,lightrail=https://feeds.mta.maryland.gov/gtfs/light-rail,metro=https://feeds.mta.maryland.gov/gtfs/metro,marc=https://mdotmta-gtfs.s3.amazonaws.com/mdotmta_gtfs_marc.zip,commuter=https://feeds.mta.maryland.gov/gtfs/commuter-bus
GTFS_STATIC_SOURCES=

# OPTION B: Single GTFS zip URL (unused when GTFS_STATIC_SOURCES is set)
# Use this for simple single-agency setups
GTFS_STATIC_URL=

# ============================================================================
# REALTIME GTFS FEEDS CONFIGURATION
# ============================================================================

# Multi-feed realtime configuration
# Comma-separated list of feed names (each feed has its own URL/key config below)
# Example: FEEDS=localbus,marc,lightrail
FEEDS=

# ============================================================================
# LEGACY SINGLE-FEED CONFIGURATION (DEPRECATED)
# ============================================================================
# These are maintained for backwards compatibility but prefer the multi-feed
# configuration above for better scalability and organization.

# Single GTFS-RT feed URLs (deprecated - use FEED_* variables instead)
GTFS_RT_VEHICLES_URL=
GTFS_RT_TRIP_UPDATES_URL=
GTFS_RT_ALERTS_URL=

# ============================================================================
# SWIFTLY API CONFIGURATION
# ============================================================================

# Global Swiftly API key (used as fallback or for legacy single-feed config)
# Get your key from Swiftly dashboard
SWIFTLY_API_KEY=

# Swiftly agency identifier (e.g., 'mta-maryland', 'metro-transit')
SWIFTLY_AGENCY_KEY=

# ============================================================================
# PER-FEED CONFIGURATION EXAMPLES
# ============================================================================
# Configure individual feeds by setting FEED_{name}_* variables
# where {name} matches entries in your FEEDS list above.

# EXAMPLE: Local Bus via Swiftly
# FEED_localbus_VEHICLES_URL=https://api.goswift.ly/real-time/mta-maryland/gtfs-rt-vehicle-positions
# FEED_localbus_TRIP_UPDATES_URL=https://api.goswift.ly/real-time/mta-maryland/gtfs-rt-trip-updates
# FEED_localbus_ALERTS_URL=https://api.goswift.ly/real-time/mta-maryland/gtfs-rt-alerts/v2
# FEED_localbus_API_KEY=your_swiftly_api_key_here

# EXAMPLE: MARC via S3 (no API key required)
# FEED_marc_VEHICLES_URL=https://mdotmta-gtfs-rt.s3.amazonaws.com/MARC+RT/marc-vp.pb
# FEED_marc_TRIP_UPDATES_URL=https://mdotmta-gtfs-rt.s3.amazonaws.com/MARC+RT/marc-tu.pb
# FEED_marc_ALERTS_URL=

# EXAMPLE: Metro via custom endpoint
# FEED_metro_VEHICLES_URL=https://your-metro-api.com/gtfs-rt/vehicles
# FEED_metro_TRIP_UPDATES_URL=https://your-metro-api.com/gtfs-rt/trip-updates
# FEED_metro_ALERTS_URL=https://your-metro-api.com/gtfs-rt/alerts
# FEED_metro_API_KEY=your_metro_api_key

# ============================================================================
# REALTIME POLLING CONFIGURATION
# ============================================================================

# Global polling intervals in seconds (respects API rate limits)
# Vehicle positions (high frequency for real-time tracking)
VEHICLES_POLL_SECONDS=6

# Trip updates (schedule adherence data)
TRIP_UPDATES_POLL_SECONDS=60

# Service alerts (disruptions, delays, etc.)
ALERTS_POLL_SECONDS=60

# Per-feed polling overrides (optional)
# FEED_localbus_VEHICLES_POLL_SECONDS=5
# FEED_localbus_TRIP_UPDATES_POLL_SECONDS=30
# FEED_localbus_ALERTS_POLL_SECONDS=120

# ============================================================================
# WEB MAP CONFIGURATION
# ============================================================================

# MapLibre basemap style URL (injected into Angular frontend)
# Leave empty to use default: OpenFreeMap Liberty (free, no API key required)
# 
# Popular alternatives:
# - MapTiler: https://api.maptiler.com/maps/streets-v2/style.json?key=YOUR_KEY
# - Mapbox: https://api.mapbox.com/styles/v1/mapbox/streets-v12?access_token=YOUR_TOKEN
# - Custom: Your own style.json URL
MAP_STYLE_URL=

# ============================================================================
# ROUTE MATCHING & VALHALLA CONFIGURATION
# ============================================================================

# Valhalla routing engine URL for route matching
# Default points to local Valhalla instance in docker-compose
VALHALLA_URL=http://valhalla:8002

# Route shape matching parameters
# Distance in meters for sampling route shapes (lower = more precise, higher = faster)
MATCH_SAMPLE_METERS=40

# Routing costing model: auto, pedestrian, bicycle, bus, taxi
MATCH_COSTING=auto

# Search radius in meters for map matching (how far to look for roads)
MATCH_SEARCH_RADIUS=50
